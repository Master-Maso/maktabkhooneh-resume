{"version":3,"sources":["components/Fullpage.js","components/DownIcon.js","sections/TitlesSection.js","sections/AboutSection.js","components/SkillCard.js","sections/SkillSection.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","children","this","props","react_default","a","createElement","className","concat","Component","DownIcon","onClick","id","src","icon","TitlesSection","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeColor","setState","color","state","bind","assertThisInitialized","src_components_Fullpage","style","onMouseOver","onMouseLeave","data","title","subtitle","keys","links","map","key","react_social_icons","url","modules","activeClass","to","spy","smooth","offset","duration","delay","src_components_DownIcon","icons","down","console","log","name","AboutSection","sections","items","p","content","SkillCard","skill","image","SkillSection","eachSkill","src_components_SkillCard","App","src_sections_TitlesSection","src_sections_AboutSection","src_sections_SkillSection","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fd811fc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Fullpage.css';\r\n\r\nclass Fullpage extends Component {\r\n    render() {\r\n        const {children} = this.props;\r\n        return (\r\n            <div className={`fullPage ${this.props.className || ''} `}>\r\n                {children}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fullpage;","import React, {Component} from 'react';\r\nimport './DownIcon.css';\r\n// import data from \"../data.json\";\r\n\r\nclass DownIcon extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"pageDown\" onClick= {this.props.onClick}>\r\n\r\n                <div id=\"iconImage\">\r\n                    <img src={this.props.icon}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DownIcon;","import React, {Component} from 'react';\r\nimport Fullpage from '../components/Fullpage'\r\nimport data from '../data.json';\r\nimport {SocialIcon} from 'react-social-icons';\r\nimport './TitlesSection.css'\r\nimport DownIcon from \"../components/DownIcon\";\r\nimport { Link, Element} from 'react-scroll'\r\n\r\nclass TitlesSection extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            color: 'white'\r\n        }\r\n        this.changeColor = this.changeColor.bind(this)\r\n    }\r\n\r\n    changeColor = () => {\r\n        this.setState({\r\n            color: this.state.color === 'white' ? 'yellow' : 'white'\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Fullpage className=\"first\">\r\n\r\n                    <h1 className=\"title\" style={{\r\n                        color: this.state.color\r\n                    }}\r\n                        onMouseOver={this.changeColor}\r\n                        onMouseLeave={this.changeColor}>\r\n                        {data.title}\r\n                    </h1>\r\n                    <div>\r\n                        <h2>{data.subtitle}</h2>\r\n                    </div>\r\n                    <div className=\"icon-wrapper\">\r\n                        {\r\n                            Object.keys(data.links).map(key => {\r\n                                return (\r\n                                    <div className=\"icon\">\r\n                                        <SocialIcon url={data.links[key]}/>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Fullpage>\r\n                <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={50} duration={500} delay={200}>\r\n                    <DownIcon icon={data.icons.down}\r\n                              onClick={() => console.log('I am working')}/>\r\n                </Link>\r\n                <Element name=\"about\" className=\"element\"/>\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TitlesSection;","import React, {Component} from 'react';\r\nimport Fullpage from '../components/Fullpage'\r\nimport data from '../data.json';\r\nimport './AboutSection.css'\r\n\r\nclass AboutSection extends Component {\r\n    render() {\r\n        return (\r\n            <Fullpage className=\"second\">\r\n                <h3>\r\n                    {data.sections[0].title}\r\n                </h3>\r\n                <div className=\"paragraphs\">\r\n                    {data.sections[0].items.map(p => {\r\n                            return <p>{p.content}</p>\r\n                        }\r\n                    )}\r\n                </div>\r\n            </Fullpage>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutSection;","import React, {Component} from 'react';\r\nimport './SkillCard.css';\r\n\r\nclass SkillCard extends Component {\r\n    render() {\r\n        const {skill} = this.props;\r\n        return (\r\n                <div className=\"card\">\r\n                    <img src={skill.content.image}/>\r\n                    <h4>{skill.content.title}</h4>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SkillCard;","import React, {Component} from 'react';\r\nimport Fullpage from '../components/Fullpage'\r\nimport data from '../data.json';\r\nimport './SkillSection.css'\r\nimport SkillCard from '../components/SkillCard'\r\n\r\nclass SkillSection extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <Fullpage className=\"third\">\r\n                <h3>\r\n                    {data.sections[1].title}\r\n                </h3>\r\n                <div className=\"skills\">\r\n                {data.sections[1].items.map(eachSkill => {\r\n                        return (\r\n                            <SkillCard skill={eachSkill}/>\r\n                        )\r\n                    }\r\n                )}\r\n                </div>\r\n            </Fullpage>\r\n        );\r\n    }\r\n}\r\nexport default SkillSection;","import React from 'react';\n\nimport TitlesSection from './sections/TitlesSection';\nimport AboutSection from './sections/AboutSection';\nimport SkillSection from './sections/SkillSection';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"navigation\" />\n            <TitlesSection/>\n            <AboutSection/>\n            <SkillSection/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}